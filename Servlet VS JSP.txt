Servlet VS JSP

Purpose:
Servlets: Servlets are Java classes that are responsible for processing requests and generating responses on the server-side. They handle the application's logic, including database operations, form handling, and other backend tasks.

JSP: JSP, on the other hand, is a technology for embedding Java code within HTML pages. JSPs are primarily used for defining the presentation layer of a web application. They are often used to display dynamic content generated by servlets.

---------------

Coding Style:
Servlets: Servlets are Java classes that require developers to write Java code to generate HTML content. Servlets are well-suited for developers who are comfortable with Java programming.

JSP: JSP allows developers to embed Java code within HTML, making it easier to write and maintain the presentation layer. JSP pages look more like traditional HTML pages with embedded Java code snippets.

---------

Separation of Concerns:
Servlets: Servlets tend to mix Java code and HTML content, which can lead to less separation of concerns. Developers need to take care to keep their code organized and maintainable.

JSP: JSP encourages a better separation of concerns by keeping Java code (business logic) separate from the HTML content (presentation). This separation makes it easier for web designers and developers to work on different aspects of the application simultaneously.

----------------
Ease of Development:
Servlets: Servlets provide more control over the response generation process, but they often require more coding for generating HTML responses compared to JSP.

JSP: JSP simplifies the development of the presentation layer by allowing developers to focus on the HTML structure and embed Java code where needed.

------------------------

Performance:
Servlets: Servlets can be more efficient for handling certain types of requests, especially when the logic is complex and 
does not involve a significant amount of HTML generation.


JSP: JSP may introduce a small overhead because the JSP pages need to be compiled into servlets before execution. However, modern JSP engines optimize this process, so the performance difference is often negligible.


-------------------

Use Cases:
Servlets: Servlets are suitable for handling complex business logic, processing forms, and managing application state.


JSP: JSP is ideal for creating dynamic web pages, rendering data from servlets or other backend components, and separating the presentation from the logic.


-------------------------------->
<<!DOCTYPE html>
<html>
<head>
    <title>Login Page</title>
</head>
<body>
    <h2>Login</h2>
    <form action="login.jsp" method="get">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        
        <input type="submit" value="Login">
    </form>
</body>
</html>

----------------------------->

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <title>Login Result</title>
</head>
<body>
    <h2>Login Result</h2>
    <% 
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        if (username.equals("Admin1234") && password.equals("Admin@1234")) {
    %>
            <p>Login successful! Welcome, <%= username %></p>
    <%
        } else {
    %>
            <p>Login failed. Please check your username and password.</p>
    <%
        }
    %>
</body>
</html>
