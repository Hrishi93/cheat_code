107: Perform various join operations on tables 


-- Create department table
CREATE TABLE department (
    department_id INT AUTO_INCREMENT PRIMARY KEY,
    department_name VARCHAR(255) NOT NULL
);

-- Create employee table with a foreign key reference to the department table
CREATE TABLE employee (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_name VARCHAR(255) NOT NULL,
    employee_salary DECIMAL(10, 2),
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES department(department_id)
);


INSERT INTO department (department_name) VALUES ('HR'), ('IT'), ('Finance');


INSERT INTO employee (employee_name, employee_salary, department_id) VALUES
('Employee1', 60000.00, 1), 



01-Inner Join
SELECT employee.employee_id, employee.employee_name, employee.employee_salary, department.department_name
FROM employee
INNER JOIN department ON employee.department_id = department.department_id;

--
02 - Left Join

SELECT employee.employee_id, employee.employee_name, employee.employee_salary, department.department_name
FROM employee
LEFT JOIN department ON employee.department_id = department.department_id;

--
03 - Right Join
SELECT employee.employee_id, employee.employee_name, employee.employee_salary, department.department_name
FROM employee
RIGHT JOIN department ON employee.department_id = department.department_id;

----
05 - Full Join

-- Records in employee and matching departments
SELECT employee.employee_id, employee.employee_name, employee.employee_salary, department.department_name
FROM employee
LEFT JOIN department ON employee.department_id = department.department_id

UNION

-- Records in department with no matching employees
SELECT employee.employee_id, employee.employee_name, employee.employee_salary, department.department_name
FROM employee
RIGHT JOIN department ON employee.department_id = department.department_id
WHERE employee.employee_id IS NULL;


